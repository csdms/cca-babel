/* Generated By:JJTree&JavaCC: Do not edit this line. SIDLParserConstants.java */
package gov.llnl.babel.parsers.sidl2;

public interface SIDLParserConstants {

  int EOF = 0;
  int SINGLE_LINE_COMMENT = 9;
  int DOC_COMMENT = 10;
  int MULTI_LINE_COMMENT = 11;
  int VOID = 13;
  int ARRAY = 14;
  int RARRAY = 15;
  int BOOLEAN = 16;
  int CHAR = 17;
  int DCOMPLEX = 18;
  int DOUBLE = 19;
  int FCOMPLEX = 20;
  int FLOAT = 21;
  int INT = 22;
  int LONG = 23;
  int OPAQUE = 24;
  int STRING = 25;
  int CLASS = 26;
  int ENUM = 27;
  int STRUCT = 28;
  int INTERFACE = 29;
  int ABSTRACT = 30;
  int LOGICAL_AND = 31;
  int COPY = 32;
  int COLUMN_MAJOR = 33;
  int ELSE = 34;
  int ENSURE = 35;
  int EXTENDS = 36;
  int FINAL = 37;
  int FROM = 38;
  int IFF = 39;
  int IMPLEMENTS = 40;
  int IMPLEMENTS_ALL = 41;
  int IMPLIES = 42;
  int IMPORT = 43;
  int IN = 44;
  int INOUT = 45;
  int INVARIANT = 46;
  int IS = 47;
  int LOCAL = 48;
  int MODULUS = 49;
  int NOT = 50;
  int NULL = 51;
  int NONBLOCKING = 52;
  int ONEWAY = 53;
  int ORDER = 54;
  int LOGICAL_OR = 55;
  int OUT = 56;
  int PACKAGE = 57;
  int PURE = 58;
  int REMAINDER = 59;
  int REQUIRE = 60;
  int RESULT = 61;
  int ROW_MAJOR = 62;
  int STATIC = 63;
  int THEN = 64;
  int THROWS = 65;
  int VERSION = 66;
  int LOGICAL_XOR = 67;
  int IDENTIFIER = 68;
  int EXTENSION = 69;
  int VERSION_STRING = 70;
  int LETTER = 71;
  int DIGIT = 72;
  int LPAREN = 73;
  int RPAREN = 74;
  int LBRACE = 75;
  int RBRACE = 76;
  int LBRACKET = 77;
  int RBRACKET = 78;
  int SEMICOLON = 79;
  int COMMA = 80;
  int DOT = 81;
  int ATTRIB_BEGIN = 82;
  int ATTRIB_ID = 83;
  int ATTRIB_STRING = 84;
  int ATTRIB_EQ = 85;
  int ATTRIB_COMMA = 86;
  int ATTRIB_END = 87;
  int ASSIGN = 93;
  int BITWISE_AND = 94;
  int BITWISE_XOR = 95;
  int COLON = 96;
  int EQ = 97;
  int GE = 98;
  int GT = 99;
  int LE = 100;
  int LT = 101;
  int MINUS = 102;
  int NE = 103;
  int BITWISE_OR = 104;
  int PLUS = 105;
  int POWER = 106;
  int SLASH = 107;
  int STAR = 108;
  int TILDE = 109;
  int LSHIFT = 110;
  int RSHIFT = 111;
  int BOOLEAN_LITERAL = 112;
  int FALSE = 113;
  int TRUE = 114;
  int INTEGER_LITERAL = 115;
  int DECIMAL_LITERAL = 116;
  int HEX_LITERAL = 117;
  int OCTAL_LITERAL = 118;
  int FLOATING_POINT_LITERAL = 119;
  int SIMPLE_FLOATING_POINT_LITERAL = 120;
  int EXPONENT = 121;
  int CHARACTER_LITERAL = 122;
  int STRING_LITERAL = 123;

  int DEFAULT = 0;
  int IN_SINGLE_LINE_COMMENT = 1;
  int IN_DOC_COMMENT = 2;
  int IN_MULTI_LINE_COMMENT = 3;
  int IN_ATTRIB_LIST = 4;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"void\"",
    "\"array\"",
    "\"rarray\"",
    "\"bool\"",
    "\"char\"",
    "\"dcomplex\"",
    "\"double\"",
    "\"fcomplex\"",
    "\"float\"",
    "\"int\"",
    "\"long\"",
    "\"opaque\"",
    "\"string\"",
    "\"class\"",
    "\"enum\"",
    "\"struct\"",
    "\"interface\"",
    "\"abstract\"",
    "\"and\"",
    "\"copy\"",
    "\"column-major\"",
    "\"else\"",
    "\"ensure\"",
    "\"extends\"",
    "\"final\"",
    "\"from\"",
    "\"iff\"",
    "\"implements\"",
    "\"implements-all\"",
    "\"implies\"",
    "\"import\"",
    "\"in\"",
    "\"inout\"",
    "\"invariant\"",
    "\"is\"",
    "\"local\"",
    "\"mod\"",
    "\"not\"",
    "\"null\"",
    "\"nonblocking\"",
    "\"oneway\"",
    "\"order\"",
    "\"or\"",
    "\"out\"",
    "\"package\"",
    "\"pure\"",
    "\"rem\"",
    "\"require\"",
    "\"result\"",
    "\"row-major\"",
    "\"static\"",
    "\"then\"",
    "\"throws\"",
    "\"version\"",
    "\"xor\"",
    "<IDENTIFIER>",
    "<EXTENSION>",
    "<VERSION_STRING>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"%attrib{\"",
    "<ATTRIB_ID>",
    "<ATTRIB_STRING>",
    "\"=\"",
    "\",\"",
    "\"}\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"=\"",
    "\"&\"",
    "\"^\"",
    "\":\"",
    "\"==\"",
    "\">=\"",
    "\">\"",
    "\"<=\"",
    "\"<\"",
    "\"-\"",
    "\"!=\"",
    "\"|\"",
    "\"+\"",
    "\"**\"",
    "\"/\"",
    "\"*\"",
    "\"~\"",
    "\"<<<\"",
    "\">>>\"",
    "<BOOLEAN_LITERAL>",
    "\"false\"",
    "\"true\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<SIMPLE_FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"%\"",
  };

}
