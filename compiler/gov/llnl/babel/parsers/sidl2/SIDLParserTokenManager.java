/* Generated By:JJTree&JavaCC: Do not edit this line. SIDLParserTokenManager.java */
package gov.llnl.babel.parsers.sidl2;

public class SIDLParserTokenManager implements SIDLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffff9fffcfe000L) != 0L || (active1 & 0xcL) != 0L)
         {
            jjmatchedKind = 68;
            return 5;
         }
         if ((active0 & 0x140L) != 0L || (active1 & 0x80000000000L) != 0L)
            return 2;
         if ((active0 & 0x6000300000L) != 0L)
         {
            jjmatchedKind = 68;
            return 12;
         }
         if ((active1 & 0x20000L) != 0L)
            return 18;
         if ((active1 & 0x2000L) != 0L)
            return 7;
         if ((active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 68;
            return 15;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0xff3f0fffdfbfe000L) != 0L || (active1 & 0xfL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active0 & 0xc0f00020400000L) != 0L)
            return 5;
         return -1;
      case 2:
         if ((active0 & 0xf6796f7f5fbfe000L) != 0L || (active1 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 2;
            }
            return 5;
         }
         if ((active0 & 0x9060080a0400000L) != 0L || (active1 & 0x8L) != 0L)
            return 5;
         return -1;
      case 3:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xb2716f3a773cc000L) != 0L || (active1 & 0x6L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
            return 5;
         }
         if ((active0 & 0x408004508832000L) != 0L || (active1 & 0x1L) != 0L)
            return 5;
         return -1;
      case 4:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xb2304f1a731c8000L) != 0L || (active1 & 0x6L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 4;
            return 5;
         }
         if ((active0 & 0x41202004204000L) != 0L)
            return 5;
         return -1;
      case 5:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x1210471260140000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
            return 5;
         }
         if ((active0 & 0xa020080813088000L) != 0L || (active1 & 0x2L) != 0L)
            return 5;
         return -1;
      case 6:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10430060140000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 6;
            return 5;
         }
         if ((active0 & 0x1200041000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 5;
         return -1;
      case 7:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10430020000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 7;
            return 5;
         }
         if ((active0 & 0x40140000L) != 0L)
            return 5;
         return -1;
      case 8:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10030000000000L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 8;
            return 5;
         }
         if ((active0 & 0x400020000000L) != 0L)
            return 5;
         return -1;
      case 9:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 9;
            }
            return 5;
         }
         if ((active0 & 0x30000000000L) != 0L)
            return 5;
         return -1;
      case 10:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 5;
         return -1;
      case 11:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 68;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L);
      case 37:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 38:
         return jjStopAtPos(0, 94);
      case 40:
         return jjStopAtPos(0, 73);
      case 41:
         return jjStopAtPos(0, 74);
      case 42:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
      case 43:
         return jjStopAtPos(0, 105);
      case 44:
         return jjStopAtPos(0, 80);
      case 45:
         return jjStopAtPos(0, 102);
      case 46:
         return jjStartNfaWithStates_0(0, 81, 18);
      case 47:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L);
      case 58:
         return jjStopAtPos(0, 96);
      case 59:
         return jjStopAtPos(0, 79);
      case 60:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x401000000000L);
      case 61:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 62:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800400000000L);
      case 91:
         return jjStartNfaWithStates_0(0, 77, 7);
      case 93:
         return jjStopAtPos(0, 78);
      case 94:
         return jjStopAtPos(0, 95);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xc0004000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x304020000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc0000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1c08000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x6000300000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xff8020400000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000800000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1c000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1e0000001000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x600000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x7800000000008000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000000012000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x4L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 123:
         return jjStopAtPos(0, 75);
      case 124:
         return jjStopAtPos(0, 104);
      case 125:
         return jjStopAtPos(0, 76);
      case 126:
         return jjStopAtPos(0, 109);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 60:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L);
      case 61:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000008000L, active1, 0x40000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3800000000000000L, active1, 0x4L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0x3L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x404200000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xf0000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x206008a8400000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4017000300892000L, active1, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40004000004000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 5);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000012000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x508000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 60:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 110);
         break;
      case 62:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 111);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000005020000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x201000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 5);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x1L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000200000000L, active1, 0L);
      case 109:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 5);
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10002000800000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x204000350000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xf0100000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000001200c000L, active1, 0x6L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000c40000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 5);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x1020000000L, active1, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8080000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1402000204000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000080000L, active1, 0L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 5);
         break;
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 5);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x40001020000000L, active1, 0L);
      case 103:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 5);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x70000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 5);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x140000L, active1, 0L);
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 5);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x2L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000040000000L, active1, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000200a10000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x220000000008000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x9000040000000000L, active1, 0x4L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 5);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0x2010000000080000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000200000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1002000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x140000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0x480860000000L, active1, 0x40000L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 5);
         break;
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 5);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 5);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000040000000L, active1, 0L);
      case 99:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 5);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 5);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 5);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
      case 103:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x140000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 5);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 5);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 5);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 5);
         break;
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 5);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400020000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000040000000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 5);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 5);
         return jjMoveStringLiteralDfa7_0(active0, 0x30000140000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 5);
         break;
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 5);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x430000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 5);
         break;
      case 120:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 5);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 5);
         break;
      case 123:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(7, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 5);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(8, 62);
         break;
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 5);
         return jjMoveStringLiteralDfa9_0(active0, 0x30000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L);
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 52, 5);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000L);
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(11, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(13, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};

private final int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 83;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(5);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 14);
                  else if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  else if (curChar == 39)
                     jjAddStates(18, 19);
                  else if (curChar == 46)
                     jjCheckNAdd(18);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddStates(20, 22);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddStates(23, 25);
                  }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(5);
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 17:
                  if (curChar == 46)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddStates(28, 30);
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if (curChar == 39)
                     jjAddStates(18, 19);
                  break;
               case 24:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if (curChar == 39 && kind > 122)
                     kind = 122;
                  break;
               case 27:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 25);
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 30:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 32:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  break;
               case 33:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 35:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 36:
                  if (curChar == 34 && kind > 123)
                     kind = 123;
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 34);
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 39:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 41:
                  if (curChar != 48)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(23, 25);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddTwoStates(45, 44);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 14);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar == 46)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar == 46)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar == 46)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(57, 22);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 62:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 22);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar != 46)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(66, 22);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(68, 22);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 71:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(72, 22);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 75:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(76, 22);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 78:
                  if (curChar == 46)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(79);
                  break;
               case 80:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(20, 22);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddTwoStates(81, 44);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(82);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     jjCheckNAdd(5);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 91)
                     jjCheckNAdd(7);
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                     jjCheckNAdd(5);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 91)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 93 && kind > 69)
                     kind = 69;
                  break;
               case 9:
                  if (curChar == 101 && kind > 112)
                     kind = 112;
                  break;
               case 10:
                  if (curChar == 115)
                     jjCheckNAdd(9);
                  break;
               case 11:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 117)
                     jjCheckNAdd(9);
                  break;
               case 16:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 22:
                  if ((0x5000000050L & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 24:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar == 92)
                     jjAddStates(43, 45);
                  break;
               case 27:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 34:
                  if (curChar == 92)
                     jjAddStates(46, 48);
                  break;
               case 35:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 42:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if ((0x100000001000L & l) != 0L && kind > 115)
                     kind = 115;
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 70:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 74:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 83 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 89);
      case 10:
         return jjStopAtPos(0, 90);
      case 12:
         return jjStopAtPos(0, 92);
      case 13:
         return jjStopAtPos(0, 91);
      case 32:
         return jjStopAtPos(0, 88);
      case 44:
         return jjStopAtPos(0, 86);
      case 61:
         return jjStopAtPos(0, 85);
      case 125:
         return jjStopAtPos(0, 87);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 34)
                     jjCheckNAddStates(59, 61);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 5:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 6:
                  if (curChar == 34 && kind > 84)
                     kind = 84;
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(62, 65);
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 9:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(66, 68);
                  break;
               case 5:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(59, 61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   47, 48, 52, 53, 58, 59, 64, 65, 69, 70, 73, 74, 22, 77, 78, 33, 
   34, 36, 24, 26, 81, 44, 82, 42, 45, 44, 7, 8, 18, 19, 22, 33, 
   34, 38, 36, 60, 61, 22, 73, 74, 22, 20, 21, 27, 28, 30, 35, 37, 
   39, 56, 57, 62, 63, 67, 68, 71, 72, 75, 76, 3, 4, 6, 3, 4, 
   8, 6, 5, 7, 9, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\166\157\151\144", "\141\162\162\141\171", "\162\141\162\162\141\171", "\142\157\157\154", 
"\143\150\141\162", "\144\143\157\155\160\154\145\170", "\144\157\165\142\154\145", 
"\146\143\157\155\160\154\145\170", "\146\154\157\141\164", "\151\156\164", "\154\157\156\147", 
"\157\160\141\161\165\145", "\163\164\162\151\156\147", "\143\154\141\163\163", "\145\156\165\155", 
"\163\164\162\165\143\164", "\151\156\164\145\162\146\141\143\145", "\141\142\163\164\162\141\143\164", 
"\141\156\144", "\143\157\160\171", "\143\157\154\165\155\156\55\155\141\152\157\162", 
"\145\154\163\145", "\145\156\163\165\162\145", "\145\170\164\145\156\144\163", 
"\146\151\156\141\154", "\146\162\157\155", "\151\146\146", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\154\145\155\145\156\164\163\55\141\154\154", 
"\151\155\160\154\151\145\163", "\151\155\160\157\162\164", "\151\156", "\151\156\157\165\164", 
"\151\156\166\141\162\151\141\156\164", "\151\163", "\154\157\143\141\154", "\155\157\144", "\156\157\164", 
"\156\165\154\154", "\156\157\156\142\154\157\143\153\151\156\147", "\157\156\145\167\141\171", 
"\157\162\144\145\162", "\157\162", "\157\165\164", "\160\141\143\153\141\147\145", 
"\160\165\162\145", "\162\145\155", "\162\145\161\165\151\162\145", "\162\145\163\165\154\164", 
"\162\157\167\55\155\141\152\157\162", "\163\164\141\164\151\143", "\164\150\145\156", "\164\150\162\157\167\163", 
"\166\145\162\163\151\157\156", "\170\157\162", null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\45\141\164\164\162\151\142\173", null, null, 
"\75", "\54", "\175", null, null, null, null, null, "\75", "\46", "\136", "\72", 
"\75\75", "\76\75", "\76", "\74\75", "\74", "\55", "\41\75", "\174", "\53", "\52\52", 
"\57", "\52", "\176", "\74\74\74", "\76\76\76", null, null, null, null, null, null, 
null, null, null, null, null, null, "\45", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_DOC_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_ATTRIB_LIST", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0x1d99ffffe0fffe7fL, 
};
static final long[] jjtoSkip = {
   0xe3eL, 0x1f000000L, 
};
static final long[] jjtoSpecial = {
   0xe3eL, 0x1f000000L, 
};
static final long[] jjtoMore = {
   0x11c0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[83];
private final int[] jjstateSet = new int[166];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public SIDLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SIDLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 83; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                    input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
