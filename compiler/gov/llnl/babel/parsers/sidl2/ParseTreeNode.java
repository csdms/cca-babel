/* Generated By:JJTree: Do not edit this line. ParseTreeNode.java */

package gov.llnl.babel.parsers.sidl2;

public class ParseTreeNode implements Node {
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected SIDLParser parser;

  protected Token first, last; // gkk
  public String name=""; // gkk
  public String doc=""; // gkk

  public ParseTreeNode(int i) {
    id = i;
  }

  public ParseTreeNode(SIDLParser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
    first = parser.getToken(1); // gkk
  }
 
  public void jjtClose() {
    last = parser.getToken(0);  // gkk
  }
 
  public Token getFirstToken() { return first; } // gkk
  void setFirstToken(Token f) { first = f; } // tgwe
  public Token getLastToken() { return last; }   // gkk
  void setLastToken(Token l) { last = l; } // tgwe
  public int getID() { return id; } // gkk
   
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /** Accept the visitor. **/
  public Object jjtAccept(SIDLParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /** Accept the visitor. **/
  public Object childrenAccept(SIDLParserVisitor visitor, Object data) {
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /* You can override these two methods in subclasses of ParseTreeNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return SIDLParserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
	ParseTreeNode n = (ParseTreeNode)children[i];
	if (n != null) {
	  n.dump(prefix + " ");
	}
      }
    }
  }
}

