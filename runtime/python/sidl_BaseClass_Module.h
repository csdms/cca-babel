/*
 * File:          sidl_BaseClass_Module.h
 * Symbol:        sidl.BaseClass-v0.9.17
 * Symbol Type:   class
 * Babel Version: 2.0.0 (Revision: 7435  trunk)
 * Release:       $Name:  $
 * Revision:      @(#) $Id: $
 * Description:   expose a constructor for the Python wrapper
 * 
 * Copyright (c) 2000-2002, Lawrence Livermore National Security, LLC.
 * Produced at the Lawrence Livermore National Laboratory.
 * Written by the Components Team <components@llnl.gov>
 * All rights reserved.
 * 
 * This file is part of Babel. For more information, see
 * http://www.llnl.gov/CASC/components/. Please read the COPYRIGHT file
 * for Our Notice and the LICENSE file for the GNU Lesser General Public
 * License.
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License (as published by
 * the Free Software Foundation) version 2.1 dated February 1999.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
 * conditions of the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 * WARNING: Automatically generated; only changes within splicers preserved
 * 
 */

/*
 * THIS CODE IS AUTOMATICALLY GENERATED BY THE BABEL
 * COMPILER. DO NOT EDIT THIS!
 * 
 * External clients need an entry point to wrap a pointer
 * to an instance of sidl.BaseClass.
 * This header files defines two methods that such clients
 * will need.
 *     sidl_BaseClass__import
 *         This should be called in the client's init
 *         module method.
 *     sidl_BaseClass__wrap
 *         This will wrap an IOR in a Python object.
 */

#ifndef included_sidl_BaseClass_MODULE
#define included_sidl_BaseClass_MODULE

#include <Python.h>
#include "sidlType.h"
#ifdef HAVE_PTHREAD
#include <pthread.h>
#endif /* HAVE_PTHREAD */

#ifdef __cplusplus
extern "C" {
#endif

struct sidl__array;

/* Forward declaration of IOR structure */
struct sidl_BaseClass__object;
struct sidl_BaseClass__array;
struct sidl_BaseInterface__object;

#define sidl_BaseClass__wrap_NUM 0
#define sidl_BaseClass__wrap_RETURN PyObject *
#define sidl_BaseClass__wrap_PROTO (const struct sidl_BaseClass__object *sidlobj)

#define sidl_BaseClass__convert_NUM 1
#define sidl_BaseClass__convert_RETURN int
#define sidl_BaseClass__convert_PROTO (PyObject *obj, struct sidl_BaseClass__object **sidlobj)

#define sidl_BaseClass__convert_python_array_NUM 2
#define sidl_BaseClass__convert_python_array_RETURN int
#define sidl_BaseClass__convert_python_array_PROTO (PyObject *obj, struct sidl_BaseClass__array **sidlarray)

#define sidl_BaseClass__convert_sidl_array_NUM 3
#define sidl_BaseClass__convert_sidl_array_RETURN PyObject *
#define sidl_BaseClass__convert_sidl_array_PROTO (struct sidl__array *sidlarray)

#define sidl_BaseClass__weakRef_NUM 4
#define sidl_BaseClass__weakRef_RETURN PyObject *
#define sidl_BaseClass__weakRef_PROTO (struct sidl_BaseClass__object *sidlobj)

#define sidl_BaseClass_deref_NUM 5
#define sidl_BaseClass_deref_RETURN void
#define sidl_BaseClass_deref_PROTO (struct sidl_BaseClass__object *sidlobj)

#define sidl_BaseClass__newRef_NUM 6
#define sidl_BaseClass__newRef_RETURN PyObject *
#define sidl_BaseClass__newRef_PROTO (struct sidl_BaseClass__object *sidlobj)

#define sidl_BaseClass__addRef_NUM 7
#define sidl_BaseClass__addRef_RETURN void
#define sidl_BaseClass__addRef_PROTO (struct sidl_BaseClass__object *sidlobj)

#define sidl_BaseClass_PyType_NUM 8
#define sidl_BaseClass_PyType_RETURN PyTypeObject *
#define sidl_BaseClass_PyType_PROTO (void)

#define sidl_BaseClass__connectI_NUM 9
#define sidl_BaseClass__connectI_RETURN struct sidl_BaseClass__object* 
#define sidl_BaseClass__connectI_PROTO (const char* url, sidl_bool ar, struct sidl_BaseInterface__object ** _ex)

#define sidl_BaseClass__API_NUM 10

#ifdef sidl_BaseClass_INTERNAL

#define sidl_BaseClass__import() ;


/*
 * This declaration is not for clients.
 */

static sidl_BaseClass__wrap_RETURN
sidl_BaseClass__wrap
sidl_BaseClass__wrap_PROTO;

static sidl_BaseClass__convert_RETURN
sidl_BaseClass__convert
sidl_BaseClass__convert_PROTO;

static sidl_BaseClass__convert_python_array_RETURN
sidl_BaseClass__convert_python_array
sidl_BaseClass__convert_python_array_PROTO;

static sidl_BaseClass__convert_sidl_array_RETURN
sidl_BaseClass__convert_sidl_array
sidl_BaseClass__convert_sidl_array_PROTO;

static sidl_BaseClass__weakRef_RETURN
sidl_BaseClass__weakRef
sidl_BaseClass__weakRef_PROTO;

static sidl_BaseClass_deref_RETURN
sidl_BaseClass_deref
sidl_BaseClass_deref_PROTO;

static sidl_BaseClass__newRef_RETURN
sidl_BaseClass__newRef
sidl_BaseClass__newRef_PROTO;

static sidl_BaseClass__addRef_RETURN
sidl_BaseClass__addRef
sidl_BaseClass__addRef_PROTO;

static sidl_BaseClass_PyType_RETURN
sidl_BaseClass_PyType
sidl_BaseClass_PyType_PROTO;

#else

static void **sidl_BaseClass__API = NULL;

#define sidl_BaseClass__wrap \
  (*((sidl_BaseClass__wrap_RETURN (*) \
  sidl_BaseClass__wrap_PROTO) \
  (sidl_BaseClass__API \
  [sidl_BaseClass__wrap_NUM])))

#define sidl_BaseClass__convert \
  (*((sidl_BaseClass__convert_RETURN (*) \
  sidl_BaseClass__convert_PROTO) \
  (sidl_BaseClass__API \
  [sidl_BaseClass__convert_NUM])))

#define sidl_BaseClass__convert_python_array \
  (*((sidl_BaseClass__convert_python_array_RETURN (*) \
  sidl_BaseClass__convert_python_array_PROTO) \
  (sidl_BaseClass__API \
  [sidl_BaseClass__convert_python_array_NUM])))

#define sidl_BaseClass__convert_sidl_array \
  (*((sidl_BaseClass__convert_sidl_array_RETURN (*) \
  sidl_BaseClass__convert_sidl_array_PROTO) \
  (sidl_BaseClass__API \
  [sidl_BaseClass__convert_sidl_array_NUM])))

#define sidl_BaseClass__weakRef \
  (*((sidl_BaseClass__weakRef_RETURN (*) \
  sidl_BaseClass__weakRef_PROTO) \
  (sidl_BaseClass__API \
  [sidl_BaseClass__weakRef_NUM])))

#define sidl_BaseClass_deref \
  (*((sidl_BaseClass_deref_RETURN (*) \
  sidl_BaseClass_deref_PROTO) \
  (sidl_BaseClass__API \
  [sidl_BaseClass_deref_NUM])))

#define sidl_BaseClass__newRef \
  (*((sidl_BaseClass__newRef_RETURN (*) \
  sidl_BaseClass__newRef_PROTO) \
  (sidl_BaseClass__API \
  [sidl_BaseClass__newRef_NUM])))

#define sidl_BaseClass__addRef \
  (*((sidl_BaseClass__addRef_RETURN (*) \
  sidl_BaseClass__addRef_PROTO) \
  (sidl_BaseClass__API \
  [sidl_BaseClass__addRef_NUM])))

#define sidl_BaseClass_PyType \
  (*((sidl_BaseClass_PyType_RETURN (*) \
  sidl_BaseClass_PyType_PROTO) \
  (sidl_BaseClass__API \
  [sidl_BaseClass_PyType_NUM])))

#define sidl_BaseClass__connectI \
  (*((sidl_BaseClass__connectI_RETURN (*) \
  sidl_BaseClass__connectI_PROTO) \
  (sidl_BaseClass__API \
  [sidl_BaseClass__connectI_NUM])))

#ifdef HAVE_PTHREAD
#define sidl_BaseClass__import() \
{ \
  pthread_mutex_t __sidl_pyapi_mutex = PTHREAD_MUTEX_INITIALIZER; \
  pthread_mutex_lock(&__sidl_pyapi_mutex); \
  if (!sidl_BaseClass__API) { \
    PyObject *_imp_module = PyImport_ImportModule("sidl.BaseClass"); \
    if (_imp_module != NULL) { \
      PyObject *_imp_module_dict = PyModule_GetDict(_imp_module); \
      PyObject *_imp_c_api_object = \
        PyDict_GetItemString(_imp_module_dict, "_C_API"); \
      if (_imp_c_api_object && PyCObject_Check(_imp_c_api_object)) { \
        sidl_BaseClass__API = \
          (void **)PyCObject_AsVoidPtr(_imp_c_api_object); \
      } \
      else { fprintf(stderr, "babel: sidl_BaseClass__import failed to lookup _C_API (%p %p %s).\n", _imp_c_api_object, _imp_c_api_object ? _imp_c_api_object->ob_type : NULL, _imp_c_api_object ? _imp_c_api_object->ob_type->tp_name : ""); }\
      Py_DECREF(_imp_module); \
    } else { fprintf(stderr, "babel: sidl_BaseClass__import failed to import its module.\n"); \
      if (PyErr_Occurred()) { PyErr_Print(); PyErr_Clear();}\
    }\
  }\
  pthread_mutex_unlock(&__sidl_pyapi_mutex); \
  pthread_mutex_destroy(&__sidl_pyapi_mutex); \
}
#else /* !HAVE_PTHREAD */
#define sidl_BaseClass__import() \
if (!sidl_BaseClass__API) { \
  PyObject *_imp_module = PyImport_ImportModule("sidl.BaseClass"); \
  if (_imp_module != NULL) { \
    PyObject *_imp_module_dict = PyModule_GetDict(_imp_module); \
    PyObject *_imp_c_api_object = \
      PyDict_GetItemString(_imp_module_dict, "_C_API"); \
    if (_imp_c_api_object && PyCObject_Check(_imp_c_api_object)) { \
      sidl_BaseClass__API = \
        (void **)PyCObject_AsVoidPtr(_imp_c_api_object); \
    } \
    else { fprintf(stderr, "babel: sidl_BaseClass__import failed to lookup _C_API (%p %p %s).\n", _imp_c_api_object, _imp_c_api_object ? _imp_c_api_object->ob_type : NULL, _imp_c_api_object ? _imp_c_api_object->ob_type->tp_name : ""); }\
    Py_DECREF(_imp_module); \
  } else { fprintf(stderr, "babel: sidl_BaseClass__import failed to import its module.\n"); \
    if (PyErr_Occurred()) { PyErr_Print(); PyErr_Clear();}\
  }\
}
#endif /* HAVE_PTHREAD */

#endif

#ifdef __cplusplus
}
#endif

#endif
