// Copyright (c) 2001, The Regents of the University of Calfornia.
// Produced at the Lawrence Livermore National Laboratory.
// Written by the Components Team <components@llnl.gov>
// UCRL-CODE-2002-054
// All rights reserved.
// 
// This file is part of Babel. For more information, see
// http://www.llnl.gov/CASC/components/. Please read the COPYRIGHT file
// for Our Notice and the LICENSE file for the GNU Lesser General Public
// License.
// 
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License (as published by
// the Free Software Foundation) version 2.1 dated February 1999.
// 
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
// conditions of the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

package Inherit version 1.1 { 

  interface A { 
    /**
     * Return a string indicating the class and method name.
     */
    string a();
  };
  
  interface A2 {
    /**
     * Return a string indicating the class and method name.
     */
    string a(in int i);
  }	

  interface B { 
    string b();
  };
  
  class C {
    string c();
  }
  
  // inheritance of interface
  class D implements A { 
    string a();
    string d();
  };
  
  // inheritance of implementation
  class E extends C { 
    // void c(); inherited
    string e();
  };
  
  // inheritance of implementation with overriding
  class E2 extends C { 
    string c();
    string e();
    static string m();
  };
  
  // multiple inheritance
  class F extends C implements A, B { 
    // void c();
    string f();
    string a();
    string b();
  };

  // multiple inheritance with overriding
  class F2 extends C implements A, B { 
    string c();
    string a();
    string b();
    string f();
  };
  
  // indirect multiple inheritance
  class G extends D { 
    // void a();
    // void d();
    string g();
  };

  // indirect multiple inheritance with overriding
  class G2 extends D { 
    string a();
    string d();
    string g();
  };

  abstract class H implements  A {
    abstract string h();
  }

  class I extends H {
    string a();
    string h();
  }
  
  //multiple inheritance with overriding and calling of super methods 
  class J extends E2 implements A, B {
    string j();
    string e();
    string c();
    string a();
    string b();
  }	

  class K extends H implements A2 {
    string a[2](in int i) from A2.a;
    string a();
    string h();

    string k();
  }

  class L implements A, A2 {
    string a[a]() from A.a;
    string a[2](in int i) from A2.a;
    string l();
  }
  
};
